/* Very small grid. */


/*
  This might not work at all.
  I think it's based on bones.
  
  Everything with a grid has a class of
  d-x t-x m-x
  
  This means: 
    d-3 = desktop-3 = 3 Columns
    t-6 = tablet-4 = 4 Columns
    m-6 = mobile-6 = 6 Columns
  
*/

// Base related grid
@include not-wider-than(mobile){ 
  $b_gutter: 1.25; // The gutter in Rem
  
  @for $i from 1 through 12 {
    .b-#{$i} {
      $percentage: $i * 100% / 12;
      width: $percentage - 2%;
      $percentage: $percentage - 0.01%;
      $num: 12 / $i - 1;
      $margin-right: ($num * $b_gutter / ($num +1))+rem;
      width: calc(#{$percentage} - #{$margin-right});
      margin-right: 2%;
      margin-right: calc(#{$b_gutter+rem});
      float: left;
    }
  }
  
  // columns from 1 - 6 have no margin when they = 12
  @for $i from 1 through 6{
    $e: 12 / $i;
    $e: round($e);
    .b-#{$i}:nth-of-type(#{$e}n+#{$e}){margin-right: 0; }
  }

  // last columns needs no margin
  [class|="b"]:nth-last-child(1), .m-l { margin-right: 0; }
}

// Mobile Grid
@include not-wider-than(tablet){ 
  $m_gutter: 1.5625; // The gutter in Rem
  
  @for $i from 1 through 12 {
    .m-#{$i} {
      $percentage: $i * 100% / 12;
      width: $percentage - 2%;
      $percentage: $percentage - 0.01%;
      $num: 12 / $i - 1;
      $margin-right: ($num * $m_gutter / ($num +1))+rem;
      width: calc(#{$percentage} - #{$margin-right});
      margin-right: 2%;
      margin-right: calc(#{$m_gutter+rem});
      float: left;
    }
  }
  
  // columns from 1 - 6 have no margin when they = 12
  @for $i from 1 through 6{
    $e: 12 / $i;
    $e: round($e);
    .m-#{$i}:nth-of-type(#{$e}n+#{$e}){margin-right: 0; }
  }

  // last columns needs no margin
  [class|="m"]:nth-last-child(1), .m-l { margin-right: 0; }
}

// Tablet grid
@include wider-than(tablet){ 
  @include not-wider-than(desktop){  
    $t_gutter: 2.1875; // The gutter in Rem
    
    @for $i from 1 through 12 {
      .t-#{$i} {
        $percentage: $i * 100% / 12;
        width: $percentage - 2%;
        $percentage: $percentage - 0.01%;
        $num: 12 / $i - 1;
        $margin-right: ($num * $t_gutter / ($num +1))+rem;
        width: calc(#{$percentage} - #{$margin-right});
        margin-right: 2%;
        margin-right: calc(#{$t_gutter+rem});
        float: left;
      }
    }
    
    // columns from 1 - 6 have no margin when they = 12
    @for $i from 1 through 6{
      $e: 12 / $i;
      $e: round($e);
      .t-#{$i}:nth-of-type(#{$e}n+#{$e}){margin-right: 0; }
    }
  
    // last columns needs no margin
    [class|="t"]:nth-last-child(1), .t-l { margin-right: 0; }
  }
}

// Desktop Grid
@include wider-than(desktop){
  $d_gutter: 2.1875; // The gutter in Rem
  
  @for $i from 1 through 12 {
    .d-#{$i} {
      $percentage: $i * 100% / 12;
      width: $percentage - 2%;
      $percentage: $percentage - 0.01%;
      $num: 12 / $i - 1;
      $margin-right: ($num * $d_gutter / ($num +1))+rem;
      width: calc(#{$percentage} - #{$margin-right});
      margin-right: 2%;
      margin-right: calc(#{$d_gutter+rem});
      float: left;
    }
  }
  
  // columns from 1 - 6 have no margin when they = 12
  @for $i from 1 through 6{
    $e: 12 / $i;
    $e: round($e);
    .d-#{$i}:nth-of-type(#{$e}n+#{$e}){margin-right: 0; }
  }

  // last columns needs no margin
  [class|="d"]:nth-last-child(1), .d-l { margin-right: 0; }
}
